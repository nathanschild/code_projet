# -*- coding: utf-8 -*-
"""
Created on Sat Feb 24 15:25:09 2024

@author: natha
"""

import requests
from bs4 import BeautifulSoup
import re
import pandas as pd
import tkinter as tk
from tkinter import ttk
import tkinter.messagebox

print("Requests version:", requests.__version__)
print("Pandas version:", pd.__version__)

# Base URL
base_url = 'https://www.skysports.com/football/burnley-vs-manchester-city/stats/'

# User agent header
user_agent = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0'
}

# Function to get the HTML of the page
def get_page(urlpage):
    # Avoid getting banned
    # Get the HTML of the webpage
    print(f"Requesting {urlpage}")
    res = requests.get(urlpage, headers=user_agent)
    print(f"Response {res.status_code}")
    # Parse the HTML
    soup = BeautifulSoup(res.text, 'html.parser')
    return soup

def scrape_match_details(match_url, match_number):
    soup = get_page(match_url)

    # Extracting match details
    match_date_tag = soup.find('time', {'class': 'sdc-site-match-header__detail-time'})
    match_date = match_date_tag.get('aria-label').split(',')[1].strip() if match_date_tag else None
    team_names_tag = soup.find('p', {'class': 'sdc-site-match-header__detail-fixture'})
    team_names = team_names_tag.text.split(' vs ') if team_names_tag else [None, None]
    score_home_tag = soup.find('span', {'data-update': 'score-home'})
    score_home = score_home_tag.text.strip() if score_home_tag else None
    score_away_tag = soup.find('span', {'data-update': 'score-away'})
    score_away = score_away_tag.text.strip() if score_away_tag else None
    attendance_tag = soup.find('span', {'class': 'sdc-site-match-header__detail-attendance'})
    attendance = attendance_tag.contents[-1].strip() if attendance_tag else None

    # Home team stats
    home_stats_tag = soup.find_all('div', {'class': 'sdc-site-match-stats__stats-home'})
    stats_home = [re.search(r'\d+', home_stats_tag[i].text).group() if home_stats_tag else None for i in range(16)]

    # Away team stats
    away_stats_tag = soup.find_all('div', {'class': 'sdc-site-match-stats__stats-away'})
    stats_away = [re.search(r'\d+', away_stats_tag[i].text).group() if away_stats_tag else None for i in range(16)]

    # Combine all details into a single list
    match_details = [match_number, match_date, team_names[0], team_names[1], score_home, score_away, attendance, *stats_home, *stats_away]

    return match_details

def update_details_label(selected_item):
    if selected_item:
        # Get the match number from the selected item
        match_number = int(matches_list.item(selected_item)['values'][0])
        match_details = scrape_match_details(base_url + f"{match_number}/", match_number)

        # Check if match_details is not empty
        if match_details:
            # Clear previous details
            details_text.set("")

            # Add team names in bold
            details_text.set(details_text.get() + f"{'Match ' + str(match_number)} - Date: {match_details[1]}\n")
            details_text.set(details_text.get() + f"{'Teams: '}{match_details[2]} vs {match_details[3]}\n")

            # Add score
            details_text.set(details_text.get() + f"{'Scores: '}{match_details[4]} - {match_details[5]}\n")

            # Add attendance
            details_text.set(details_text.get() + f"{'Attendance: '}{match_details[6]}\n")

            details_text.set(details_text.get() + "Stats:\n")

            for stat_name, stat_value in zip(['Possession Home', 'Tirs Home', 'Tirs Cadres Home', 'Tirs Non Cadres Home',
                                              'Blocked Shots Home', 'Completed Passes Home', 'Clear Cut Home', 'Corner Home',
                                              'Offsides Home', 'Tackles Completed Home', 'Aerial Duels Home', 'Saves Home',
                                              'Fouls Home', 'Fouls Won Home', 'Yellow Cards Home', 'Red Cards Home',
                                              'Possession Away', 'Tirs Away', 'Tirs Cadres Away', 'Tirs Non Cadres Away',
                                              'Blocked Shots Away', 'Completed Passes Away', 'Clear Cut Away', 'Corner Away',
                                              'Offsides Away', 'Tackles Completed Away', 'Aerial Duels Away', 'Saves Away',
                                              'Fouls Away', 'Fouls Won Away', 'Yellow Cards Away', 'Red Cards Away'], match_details[7:]):
                details_text.set(details_text.get() + f"{stat_name}: {stat_value}\n")

        else:
            print("Les d√©tails du match sont vides.")

# Main function
def main():
    # Initial match number
    match_number = 482591

    # Create an empty DataFrame
    df = pd.DataFrame(columns=['Match Number', 'Match Date', 'Team 1', 'Team 2', 'Score 1', 'Score 2', 'Attendance',
                               'Possession Home', 'Tirs Home', 'Tirs Cadres Home', 'Tirs Non Cadres Home',
                               'Blocked Shots Home', 'Completed Passes Home', 'Clear Cut Home', 'Corner Home',
                               'Offsides Home', 'Tackles Completed Home', 'Aerial Duels Home', 'Saves Home',
                               'Fouls Home', 'Fouls Won Home', 'Yellow Cards Home', 'Red Cards Home',
                               'Possession Away', 'Tirs Away', 'Tirs Cadres Away', 'Tirs Non Cadres Away',
                               'Blocked Shots Away', 'Completed Passes Away', 'Clear Cut Away', 'Corner Away',
                               'Offsides Away', 'Tackles Completed Away', 'Aerial Duels Away', 'Saves Away',
                               'Fouls Away', 'Fouls Won Away', 'Yellow Cards Away', 'Red Cards Away'])

    # Scrape match details from each match
    while match_number <= 482847:
        match_url = base_url + f"{match_number}/"
        match_date, team_names, score_home, score_away, attendance, *stats = scrape_match_details(match_url, match_number)

        print(f"Match {match_number} - Date: {match_date}")
        print(f"Teams: {team_names[0]} vs {team_names[1]}")
        print(f"Scores: {score_home} - {score_away}")
        print(f"Attendance: {attendance}")
        print(f"Stats:")
        for stat_name, stat_value in zip(['Possession Home', 'Tirs Home', 'Tirs Cadres Home', 'Tirs Non Cadres Home',
                                          'Blocked Shots Home', 'Completed Passes Home', 'Clear Cut Home', 'Corner Home',
                                          'Offsides Home', 'Tackles Completed Home', 'Aerial Duels Home', 'Saves Home',
                                          'Fouls Home', 'Fouls Won Home', 'Yellow Cards Home', 'Red Cards Home',
                                          'Possession Away', 'Tirs Away', 'Tirs Cadres Away', 'Tirs Non Cadres Away',
                                          'Blocked Shots Away', 'Completed Passes Away', 'Clear Cut Away', 'Corner Away',
                                          'Offsides Away', 'Tackles Completed Away', 'Aerial Duels Away', 'Saves Away',
                                          'Fouls Away', 'Fouls Won Away', 'Yellow Cards Away', 'Red Cards Away'], stats):
            print(f"{stat_name}: {stat_value}")

        # Append match details to DataFrame
        df.loc[len(df)] = {'Match Number': match_number, 'Match Date': match_date, 'Team 1': team_names[0],
                           'Team 2': team_names[1], 'Score 1': score_home, 'Score 2': score_away, 'Attendance': attendance,
                           **dict(zip(['Possession Home', 'Tirs Home', 'Tirs Cadres Home', 'Tirs Non Cadres Home',
                                       'Blocked Shots Home', 'Completed Passes Home', 'Clear Cut Home', 'Corner Home',
                                       'Offsides Home', 'Tackles Completed Home', 'Aerial Duels Home', 'Saves Home',
                                       'Fouls Home', 'Fouls Won Home', 'Yellow Cards Home', 'Red Cards Home',
                                       'Possession Away', 'Tirs Away', 'Tirs Cadres Away', 'Tirs Non Cadres Away',
                                       'Blocked Shots Away', 'Completed Passes Away', 'Clear Cut Away', 'Corner Away',
                                       'Offsides Away', 'Tackles Completed Away', 'Aerial Duels Away', 'Saves Away',
                                       'Fouls Away', 'Fouls Won Away', 'Yellow Cards Away', 'Red Cards Away'], stats))}
        match_number += 1

    # Save DataFrame to Excel
    df.to_excel("C:/Users/natha/OneDrive/Bureau/M1/resultats_matchs.xlsx")

if __name__ == "__main__":
    main()

# GUI code
root = tk.Tk()
root.title("Liste des matchs")
root.geometry("800x600")

# Create a vertical scrollbar
vsb = ttk.Scrollbar(root, orient="vertical")

# Create the list of matches with a vertical scrollbar
matches_list = ttk.Treeview(root, columns=('Match Number', 'Date', 'Stat Name', 'Stat Value'), show='headings',
                            yscrollcommand=vsb.set)
matches_list.heading('Match Number', text='Match Number')
matches_list.heading('Date', text='Date')
matches_list.heading('Stat Name', text='Stat Name')
matches_list.heading('Stat Value', text='Stat Value')
matches_list.pack(padx=10, pady=10)

# Set the scrollbar to update with the y-view of the Treeview
vsb.config(command=matches_list.yview)
vsb.pack(side="right", fill="y")


# Accumulate all matches in a list
all_matches = []
for match_number in range(482591, 482848):
    match_details = scrape_match_details(base_url + f"{match_number}/", match_number)
    all_matches.append(match_details)

# Add all matches to the list in the GUI
for match_details in all_matches:
    match_number = match_details[0]
    date = match_details[1]
    # Add match details to Treeview
    matches_list.insert("", "end", values=(match_number, date))

# Function to handle the selection event
def on_select(event):
    selected_item = event.widget.selection()
    if selected_item:
        # Get the match number from the selected item
        match_number = int(matches_list.item(selected_item)['values'][0])
        match_details = scrape_match_details(base_url + f"{match_number}/", match_number)

        # Check if match_details is not empty
        if match_details:
            # Create a new window for detailed stats
            stats_window = tk.Toplevel(root)
            stats_window.title(f"Match {match_number} Stats")

            # Display match details in the new window
            match_label = tk.Label(stats_window, text=f"Match {match_number} - Date: {match_details[1]}")
            match_label.grid(row=0, column=0, columnspan=2, pady=5)

            teams_label = tk.Label(stats_window, text=f"Teams: {match_details[2]} vs {match_details[3]}")
            teams_label.grid(row=1, column=0, columnspan=2, pady=5)

            scores_label = tk.Label(stats_window, text=f"Scores: {match_details[4]} - {match_details[5]}")
            scores_label.grid(row=2, column=0, columnspan=2, pady=5)

            attendance_label = tk.Label(stats_window, text=f"Attendance: {match_details[6]}")
            attendance_label.grid(row=3, column=0, columnspan=2, pady=5)

            stats_label_home = tk.Label(stats_window, text="Stats Home:")
            stats_label_home.grid(row=4, column=0, pady=5)

            stats_label_away = tk.Label(stats_window, text="Stats Away:")
            stats_label_away.grid(row=4, column=1, pady=5)

            # Create Treeview for home stats
            stats_tree_home = ttk.Treeview(stats_window, columns=('Stat Name', 'Stat Value'), show='headings')
            stats_tree_home.heading('Stat Name', text='Stat Name')
            stats_tree_home.heading('Stat Value', text='Stat Value')
            stats_tree_home.grid(row=5, column=0, pady=5)

            # Create Treeview for away stats
            stats_tree_away = ttk.Treeview(stats_window, columns=('Stat Name', 'Stat Value'), show='headings')
            stats_tree_away.heading('Stat Name', text='Stat Name')
            stats_tree_away.heading('Stat Value', text='Stat Value')
            stats_tree_away.grid(row=5, column=1, pady=5)

            # Insert home stats into Treeview
            for stat_name, stat_value in zip(['Possession Home', 'Tirs Home', 'Tirs Cadres Home', 'Tirs Non Cadres Home',
                                              'Blocked Shots Home', 'Completed Passes Home', 'Clear Cut Home', 'Corner Home',
                                              'Offsides Home', 'Tackles Completed Home', 'Aerial Duels Home', 'Saves Home',
                                              'Fouls Home', 'Fouls Won Home', 'Yellow Cards Home', 'Red Cards Home'], match_details[7:23]):
                stats_tree_home.insert("", "end", values=(stat_name, stat_value))

            # Insert away stats into Treeview
            for stat_name, stat_value in zip(['Possession Away', 'Tirs Away', 'Tirs Cadres Away', 'Tirs Non Cadres Away',
                                              'Blocked Shots Away', 'Completed Passes Away', 'Clear Cut Away', 'Corner Away',
                                              'Offsides Away', 'Tackles Completed Away', 'Aerial Duels Away', 'Saves Away',
                                              'Fouls Away', 'Fouls Won Away', 'Yellow Cards Away', 'Red Cards Away'], match_details[23:]):
                stats_tree_away.insert("", "end", values=(stat_name, stat_value))

        else:
            print("Les d√©tails du match sont vides.")

# Bind the on_select function to the selection event
matches_list.bind('<<TreeviewSelect>>', on_select)

# Text variable to display match details
details_text = tk.StringVar()
details_label = tk.Label(root, textvariable=details_text, wraplength=400)
details_label.pack(padx=10, pady=10)

# Start the main loop
root.mainloop()
