import requests
from bs4 import BeautifulSoup
import re
import pandas as pd

# Base URL
base_url = 'https://www.skysports.com/football/burnley-vs-manchester-city/stats/'

# User agent header
user_agent = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0'
}

# Function to get the HTML of the page
def get_page(urlpage):
    # Avoid getting banned
    # Get the HTML of the webpage
    print(f"Requesting {urlpage}")
    res = requests.get(urlpage, headers=user_agent)
    print(f"Response {res.status_code}")
    # Parse the HTML
    soup = BeautifulSoup(res.text, 'html.parser')
    return soup

# Function to scrape match details
def scrape_match_details(match_url):
    soup = get_page(match_url)

    # Extracting match details
    match_date_tag = soup.find('time', {'class': 'sdc-site-match-header__detail-time'})
    match_date = match_date_tag.get('aria-label').split(',')[1].strip() if match_date_tag else None
    team_names_tag = soup.find('p', {'class': 'sdc-site-match-header__detail-fixture'})
    team_names = team_names_tag.text.split(' vs ') if team_names_tag else [None, None]
    score_home_tag = soup.find('span', {'data-update': 'score-home'})
    score_home = score_home_tag.text.strip() if score_home_tag else None
    score_away_tag = soup.find('span', {'data-update': 'score-away'})
    score_away = score_away_tag.text.strip() if score_away_tag else None
    attendance_tag = soup.find('span', {'class': 'sdc-site-match-header__detail-attendance'})
    attendance = attendance_tag.contents[-1].strip() if attendance_tag else None

    # Home team stats
    home_stats_tag = soup.find_all('div', {'class': 'sdc-site-match-stats__stats-home'})
    possession_home = re.search(r'\d+', home_stats_tag[0].text).group() if home_stats_tag else None
    tirs_home = re.search(r'\d+', home_stats_tag[1].text).group() if home_stats_tag else None
    tirs_cadres_home = re.search(r'\d+', home_stats_tag[2].text).group() if home_stats_tag else None
    tirs_non_cadres_home = re.search(r'\d+', home_stats_tag[3].text).group() if home_stats_tag else None
    blocked_shot_home = re.search(r'\d+', home_stats_tag[4].text).group() if home_stats_tag else None
    completed_passes_home = re.search(r'\d+', home_stats_tag[5].text).group() if home_stats_tag else None
    clear_cut_home = re.search(r'\d+', home_stats_tag[6].text).group() if home_stats_tag else None
    corner_home = re.search(r'\d+', home_stats_tag[7].text).group() if home_stats_tag else None
    offsides_home = re.search(r'\d+', home_stats_tag[8].text).group() if home_stats_tag else None
    tackles_completed_home = re.search(r'\d+', home_stats_tag[9].text).group() if home_stats_tag else None
    aerial_duels_home = re.search(r'\d+', home_stats_tag[10].text).group() if home_stats_tag else None
    saves_home = re.search(r'\d+', home_stats_tag[11].text).group() if home_stats_tag else None
    fouls_home = re.search(r'\d+', home_stats_tag[12].text).group() if home_stats_tag else None
    fouls_won_home = re.search(r'\d+', home_stats_tag[13].text).group() if home_stats_tag else None
    yellow_cards_home = re.search(r'\d+', home_stats_tag[14].text).group() if home_stats_tag else None
    red_cards_home = re.search(r'\d+', home_stats_tag[15].text).group() if home_stats_tag else None

    # Away team stats
    away_stats_tag = soup.find_all('div', {'class': 'sdc-site-match-stats__stats-away'})
    possession_away = re.search(r'\d+', away_stats_tag[0].text).group() if away_stats_tag else None
    tirs_away = re.search(r'\d+', away_stats_tag[1].text).group() if away_stats_tag else None
    tirs_cadres_away = re.search(r'\d+', away_stats_tag[2].text).group() if away_stats_tag else None
    tirs_non_cadres_away = re.search(r'\d+', away_stats_tag[3].text).group() if away_stats_tag else None
    blocked_shot_away = re.search(r'\d+', away_stats_tag[4].text).group() if away_stats_tag else None
    completed_passes_away = re.search(r'\d+', away_stats_tag[5].text).group() if away_stats_tag else None
    clear_cut_away = re.search(r'\d+', away_stats_tag[6].text).group() if away_stats_tag else None
    corner_away = re.search(r'\d+', away_stats_tag[7].text).group() if away_stats_tag else None
    offsides_away = re.search(r'\d+', away_stats_tag[8].text).group() if away_stats_tag else None
    tackles_completed_away = re.search(r'\d+', away_stats_tag[9].text).group() if away_stats_tag else None
    aerial_duels_away = re.search(r'\d+', away_stats_tag[10].text).group() if away_stats_tag else None
    saves_away = re.search(r'\d+', away_stats_tag[11].text).group() if away_stats_tag else None
    fouls_away = re.search(r'\d+', away_stats_tag[12].text).group() if away_stats_tag else None
    fouls_won_away = re.search(r'\d+', away_stats_tag[13].text).group() if away_stats_tag else None
    yellow_cards_away = re.search(r'\d+', away_stats_tag[14].text).group() if away_stats_tag else None
    red_cards_away = re.search(r'\d+', away_stats_tag[15].text).group() if away_stats_tag else None

    return match_date, team_names, score_home, score_away, attendance, possession_home, possession_away, tirs_home, tirs_cadres_home, tirs_non_cadres_home, blocked_shot_home, completed_passes_home, clear_cut_home, corner_home, offsides_home, tackles_completed_home, aerial_duels_home, saves_home, fouls_home, fouls_won_home, yellow_cards_home, red_cards_home, tirs_away, tirs_cadres_away, tirs_non_cadres_away, blocked_shot_away, completed_passes_away, clear_cut_away, corner_away, offsides_away, tackles_completed_away, aerial_duels_away, saves_away, fouls_away, fouls_won_away, yellow_cards_away, red_cards_away

# Main function
def main():
    # Initial match number
    match_number = 482591

    # Create an empty DataFrame
    df = pd.DataFrame(columns=['Match Number', 'Match Date', 'Team 1', 'Team 2', 'Score 1', 'Score 2', 'Attendance', 'Possession Home', 'Possession Away', 'Tirs Home', 'Tirs Cadres Home', 'Tirs Non Cadres Home', 'Blocked Shots Home', 'Completed Passes Home', 'Clear Cut Home', 'Corner Home', 'Offsides Home', 'Tackles Completed Home', 'Aerial Duels Home', 'Saves Home', 'Fouls Home', 'Fouls Won Home', 'Yellow Cards Home', 'Red Cards Home', 'Tirs Away', 'Tirs Cadres Away', 'Tirs Non Cadres Away', 'Blocked Shots Away', 'Completed Passes Away', 'Clear Cut Away', 'Corner Away', 'Offsides Away', 'Tackles Completed Away', 'Aerial Duels Away', 'Saves Away', 'Fouls Away', 'Fouls Won Away', 'Yellow Cards Away', 'Red Cards Away'])

    # Scrape match details from each match
    while match_number <= 482847:
        match_url = base_url + f"{match_number}/"
        match_date, team_names, score_home, score_away, attendance, possession_home, possession_away, tirs_home, tirs_cadres_home, tirs_non_cadres_home, blocked_shot_home, completed_passes_home, clear_cut_home, corner_home, offsides_home, tackles_completed_home, aerial_duels_home, saves_home, fouls_home, fouls_won_home, yellow_cards_home, red_cards_home, tirs_away, tirs_cadres_away, tirs_non_cadres_away, blocked_shot_away, completed_passes_away, clear_cut_away, corner_away, offsides_away, tackles_completed_away, aerial_duels_away, saves_away, fouls_away, fouls_won_away, yellow_cards_away, red_cards_away = scrape_match_details(match_url)

        # Append match details to DataFrame
        df.loc[len(df)] = {'Match Number': match_number, 'Match Date': match_date, 'Team 1': team_names[0], 'Team 2': team_names[1], 'Score 1': score_home, 'Score 2': score_away, 'Attendance': attendance, 'Possession Home': possession_home, 'Possession Away': possession_away, 'Tirs Home': tirs_home, 'Tirs Cadres Home': tirs_cadres_home, 'Tirs Non Cadres Home': tirs_non_cadres_home, 'Blocked Shots Home': blocked_shot_home, 'Completed Passes Home': completed_passes_home, 'Clear Cut Home': clear_cut_home, 'Corner Home': corner_home, 'Offsides Home': offsides_home, 'Tackles Completed Home': tackles_completed_home, 'Aerial Duels Home': aerial_duels_home, 'Saves Home': saves_home, 'Fouls Home': fouls_home, 'Fouls Won Home': fouls_won_home, 'Yellow Cards Home': yellow_cards_home, 'Red Cards Home': red_cards_home, 'Tirs Away': tirs_away, 'Tirs Cadres Away': tirs_cadres_away, 'Tirs Non Cadres Away': tirs_non_cadres_away, 'Blocked Shots Away': blocked_shot_away, 'Completed Passes Away': completed_passes_away, 'Clear Cut Away': clear_cut_away, 'Corner Away': corner_away, 'Offsides Away': offsides_away, 'Tackles Completed Away': tackles_completed_away, 'Aerial Duels Away': aerial_duels_away, 'Saves Away': saves_away, 'Fouls Away': fouls_away, 'Fouls Won Away': fouls_won_away, 'Yellow Cards Away': yellow_cards_away, 'Red Cards Away': red_cards_away}

        match_number += 1

    # Save DataFrame to Excel
    df.to_excel('/Users/sarahmehiyddine/Desktop/Cours/MagistÃ¨re/M1/S2/Programmation/base.xlsx', index=False)

if __name__ == "__main__":
    main()
