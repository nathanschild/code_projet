# -*- coding: utf-8 -*-
"""
Created on Tue Feb 27 14:12:40 2024

@author: natha
"""

# -*- coding: utf-8 -*-
"""
Created on Tue Feb 27 14:08:52 2024

@author: natha
"""

import requests
from bs4 import BeautifulSoup
import re
import pandas as pd

# Base URL
base_url = 'https://www.skysports.com/football/burnley-vs-manchester-city/stats/'

# User agent header
user_agent = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0'
}

# Function to get the HTML of the page
def get_page(urlpage):
    # Avoid getting banned
    # Get the HTML of the webpage
    print(f"Requesting {urlpage}")
    res = requests.get(urlpage, headers=user_agent)
    print(f"Response {res.status_code}")
    # Parse the HTML
    soup = BeautifulSoup(res.text, 'html.parser')
    return soup

# Function to scrape match details
# Function to scrape match details
def scrape_match_details(match_url):
    soup = get_page(match_url)

    # Extracting match details
    match_date = extract_match_date(soup)
    team_names = extract_team_names(soup)
    score_home, score_away = extract_scores(soup)
    attendance = extract_attendance(soup)

    home_stats_tag = soup.find_all('div', {'class': 'sdc-site-match-stats__stats-home'})
    away_stats_tag = soup.find_all('div', {'class': 'sdc-site-match-stats__stats-away'})

    home_stats = extract_team_stats(home_stats_tag)
    away_stats = extract_team_stats(away_stats_tag)

    return match_date, team_names, score_home, score_away, attendance, home_stats, away_stats


# Function to extract match date
def extract_match_date(soup):
    match_date_tag = soup.find('time', {'class': 'sdc-site-match-header__detail-time'})
    return match_date_tag.get('aria-label').split(',')[1].strip() if match_date_tag else None

# Function to extract team names
def extract_team_names(soup):
    team_names_tag = soup.find('p', {'class': 'sdc-site-match-header__detail-fixture'})
    return team_names_tag.text.split(' vs ') if team_names_tag else [None, None]

# Function to extract scores
def extract_scores(soup):
    score_home_tag = soup.find('span', {'data-update': 'score-home'})
    score_away_tag = soup.find('span', {'data-update': 'score-away'})
    return score_home_tag.text.strip() if score_home_tag else None, score_away_tag.text.strip() if score_away_tag else None

# Function to extract attendance
def extract_attendance(soup):
    attendance_tag = soup.find('span', {'class': 'sdc-site-match-header__detail-attendance'})
    return attendance_tag.contents[-1].strip() if attendance_tag else None

def extract_team_stats(stats_tag):
    return [re.search(r'\d+', stat.get_text(strip=True)).group() if stat else None for stat in stats_tag]



# Function to main
def main():
    # Initial match number
    match_number = 482591
    
    # Scrape match details from each match
    while match_number <= 482847:
        match_url = base_url + f"{match_number}/"
        match_date, team_names, score_home, score_away, attendance, stats_home, stats_away = scrape_match_details(match_url)

        # Print match details
        print(f"Match Date: {match_date}")
        print(f"Teams: {team_names[0]} vs {team_names[1]}")
        print(f"Scores: {score_home} - {score_away}")
        print(f"Attendance: {attendance}")
        print(f"Home Stats: {stats_home}")
        print(f"Away Stats: {stats_away}")

        
        match_number += 1


if __name__ == "__main__":
    main()
